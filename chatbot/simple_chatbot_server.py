#!/usr/bin/env python3
"""
Simple Chatbot Server - Keeps models loaded in memory
Run this server once, then Django can call it via HTTP
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import sys
import os
from pathlib import Path


current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

print("üöÄ Initializing chatbot...")
from process_data import (
    df_global, load_and_clean_data, connect_milvus_lite,
    get_highest_price, get_lowest_price, product_from_brand,
    suggest_by_price, recommend_product_by_range, product_same_brand,
    HuggingFaceEmbeddings, ChatGroq, create_react_agent,
    HumanMessage, EMBEDDING_MODEL
)
import process_data
import pandas as pd
from langchain.tools import tool

# Load data
if process_data.df_global is None:
    csv_path = "amazon_data.csv"
    if not os.path.exists(csv_path):
        raise FileNotFoundError("amazon_data.csv not found")
    process_data.df_global = load_and_clean_data(csv_path)
    print("‚úÖ Data loaded")

connect_milvus_lite()
print("‚úÖ Connected to Milvus")


llm = ChatGroq(
    groq_api_key=os.getenv("GROQ_API_KEY"),
    model_name="llama-3.1-8b-instant",
    temperature=0,
)
print("‚úÖ LLM initialized")

@tool
def search_text(q: str) -> str:
    """Search for product information by name, brand, features, description, size, rating, or price.
    Use this when user asks about specific product details like:
    - "th√¥ng tin v·ªÅ s·∫£n ph·∫©m X" / "info about product X"
    - "brand c·ªßa s·∫£n ph·∫©m X" / "brand of product X"  
    - "feature c·ªßa s·∫£n ph·∫©m X" / "features of product X"
    - "gi√° c·ªßa s·∫£n ph·∫©m X" / "price of product X"
    - "m√¥ t·∫£ s·∫£n ph·∫©m X" / "description of product X"
    - "rating c·ªßa s·∫£n ph·∫©m X" / "rating of product X"
    - "size c·ªßa s·∫£n ph·∫©m X" / "size of product X"
    """
    try:
        import re
        
        # STEP 1: Detect what field user is asking for (BEFORE extracting product name)
        # Use ordered list to prioritize specific keywords (rating, price first)
        requested_field = None
        field_mappings = [
            ('rating', 'rating'),
            ('ƒë√°nh gi√°', 'rating'),
            
            ('price', 'salePrice'),
            ('gi√°', 'salePrice'),
            
            ('features', 'features'),
            ('ƒë·∫∑c ƒëi·ªÉm', 'features'),
            
            ('description', 'description'),
            ('m√¥ t·∫£', 'description'),
            
            ('brand', 'brandName'),
            ('th∆∞∆°ng hi·ªáu', 'brandName'),
            
            ('size', 'size'),
            ('k√≠ch th∆∞·ªõc', 'size'),
            
            ('material', 'material'),
            ('ch·∫•t li·ªáu', 'material'),
        ]
        
        for keyword, field in field_mappings:
            pattern = rf'\b{re.escape(keyword)}\b'
            if re.search(pattern, q.lower()):
                requested_field = field
                print(f"üîç Detected field request: {keyword} ‚Üí {field}")
                break
        
        # STEP 2: Extract product name from query
        product_name = q
        
        if requested_field:
            for keyword, field in field_mappings:
                if field == requested_field and keyword in q.lower():
                    product_name = re.sub(rf'\b{re.escape(keyword)}\b', '', product_name, flags=re.IGNORECASE).strip()
                    print(f"üîß Removed keyword '{keyword}' from query")
                    break
        
        product_name = re.sub(r'\bc·ªßa\b', '', product_name, flags=re.IGNORECASE).strip()
        product_name = re.sub(r'\bs·∫£n ph·∫©m\b', '', product_name, flags=re.IGNORECASE).strip()
        
        product_name = product_name.replace('"', '').replace("'", "").strip()
        
        if not product_name or len(product_name) < 3:
            return "‚ùå T√™n s·∫£n ph·∫©m qu√° ng·∫Øn. Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m r√µ r√†ng h∆°n."
        
        mask = process_data.df_global["name"].str.contains(product_name, case=False, na=False, regex=False)
        matching_products = process_data.df_global[mask]
        
        if matching_products.empty:
            words = product_name.split()[:3]
            if words:
                search_term = ' '.join(words)
                mask = process_data.df_global["name"].str.contains(search_term, case=False, na=False, regex=False)
                matching_products = process_data.df_global[mask]
        
        if matching_products.empty:
            first_word = product_name.split()[0] if product_name.split() else ""
            if first_word and len(first_word) > 2:
                mask = process_data.df_global["name"].str.contains(first_word, case=False, na=False, regex=False)
                matching_products = process_data.df_global[mask]
        
        if matching_products.empty:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m '{product_name}' trong c∆° s·ªü d·ªØ li·ªáu."
        
        product = matching_products.iloc[0]
        print(f"‚úÖ Found product: {product.get('name', 'N/A')[:50]}...")
        
        if requested_field and requested_field in product and pd.notna(product[requested_field]):
            field_labels = {
                "material": "Ch·∫•t li·ªáu",
                "features": "ƒê·∫∑c ƒëi·ªÉm",
                "description": "M√¥ t·∫£",
                "salePrice": "Gi√° b√°n",
                "rating": "ƒê√°nh gi√°",
                "brandName": "Th∆∞∆°ng hi·ªáu",
                "size": "K√≠ch th∆∞·ªõc",
            }
            
            label = field_labels.get(requested_field, requested_field)
            value = str(product[requested_field])
            
            value = re.sub(r'[\\{}\[\]"]', '', value).strip()
            value = re.sub(r'\s+', ' ', value)
            
            if len(value) > 500:
                value = value[:500] + "..."
            
            return f"{label} c·ªßa s·∫£n ph·∫©m '{product.get('name', 'N/A')}': {value}"
        
        result = f"üîç Th√¥ng tin s·∫£n ph·∫©m: {product.get('name', 'N/A')}\n"
        
        field_map = {
            "brandName": "Th∆∞∆°ng hi·ªáu",
            "salePrice": "Gi√° b√°n",
            "rating": "ƒê√°nh gi√°",
            "material": "Ch·∫•t li·ªáu",
            "size": "K√≠ch th∆∞·ªõc",
        }
        
        for col, label in field_map.items():
            if col in product and pd.notna(product[col]):
                value = str(product[col])
                value = re.sub(r'[\\{}\[\]"]', '', value).strip()
                value = re.sub(r'\s+', ' ', value)
                if len(value) > 200:
                    value = value[:200] + "..."
                result += f"{label}: {value}\n"
        
        return result
        
    except Exception as e:
        return f"‚ùå L·ªói khi t√¨m ki·∫øm: {str(e)}"

print("‚úÖ search_text tool created")

tools = [
    get_highest_price,
    get_lowest_price,
    suggest_by_price,
    recommend_product_by_range,
    product_from_brand,
    product_same_brand,
    search_text,
]

system_prompt = """You are a helpful Vietnamese e-commerce assistant. 

CRITICAL TOOL SELECTION RULES:

1. PRICE RANGE queries (t·ª´ X ƒë·∫øn Y, between X and Y):
   ‚Üí Use recommend_product_by_range(q=query, field="salePrice", n=3, min_price=X, max_price=Y)
   
2. HIGHEST/MOST EXPENSIVE (ƒë·∫Øt nh·∫•t, cao nh·∫•t):
   ‚Üí Use get_highest_price(field="salePrice")
   
3. LOWEST/CHEAPEST (r·∫ª nh·∫•t, th·∫•p nh·∫•t):
   ‚Üí Use get_lowest_price(field="salePrice")
   
4. BRAND queries (s·∫£n ph·∫©m VEVOR, products from X):
   ‚Üí Use product_from_brand(brand_name="X", n=3)
   
5. NEAR A PRICE (g·∫ßn gi√° X, around price X):
   ‚Üí Use suggest_by_price(q=query, field="salePrice", n=3, ref_price=X)

EXAMPLES:
- "s·∫£n ph·∫©m c√≥ gi√° t·ª´ 100 ƒë·∫øn 500" ‚Üí recommend_product_by_range
- "s·∫£n ph·∫©m ƒë·∫Øt nh·∫•t" ‚Üí get_highest_price
- "s·∫£n ph·∫©m VEVOR" ‚Üí product_from_brand
- "s·∫£n ph·∫©m g·∫ßn 200" ‚Üí suggest_by_price
- "brand c·ªßa s·∫£n ph·∫©m r·∫ª nh·∫•t" ‚Üí suggest_lowest_price
- "feature/size/description c·ªßa s·∫£n ph·∫©m X" ‚Üí search_text
- "rating c·ªßa s·∫£n ph·∫©m X" ‚Üí suggest_text
- "s·∫£n ph·∫©m c√≥ rating 4.5" ‚Üí suggest_text
- "s·∫£n ph·∫©m c√≥ size L" ‚Üí suggest_text
- "s·∫£n ph·∫©m c√≥ description X" ‚Üí search_text
- "gi√° c·ªßa s·∫£n ph·∫©m X" ‚Üí search_text


IMPORTANT: 
- Always use field="salePrice" 
- Pass the full original query as 'q' parameter"""

agent_executor = create_react_agent(llm, tools, prompt=system_prompt)
print("‚úÖ Agent ready")
print("\nüéâ Chatbot server is ready! Listening on port 8001...")

class ChatbotHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/chat':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                message = data.get('message', '')
                
                if not message:
                    self.send_response(400)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({'error': 'Message required'}).encode())
                    return
                
                print(f"\nüì® Received: {message}")
                
                # Process with LLM agent
                tool_result = None
                config = {"recursion_limit": 10}
                
                for chunk in agent_executor.stream({"messages": [HumanMessage(content=message)]}, config=config):
                    if "tools" in chunk and "messages" in chunk["tools"]:
                        for msg in chunk["tools"]["messages"]:
                            if hasattr(msg, "content") and msg.content:
                                tool_result = msg.content
                                break
                
                response_text = tool_result if tool_result else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi n√†y."
                print(f"‚úÖ Response: {response_text[:100]}...")
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps({'response': response_text}).encode())
                
            except Exception as e:
                print(f"‚ùå Error: {str(e)}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': str(e)}).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        pass

if __name__ == '__main__':
    server = HTTPServer(('localhost', 8001), ChatbotHandler)
    server.serve_forever()

